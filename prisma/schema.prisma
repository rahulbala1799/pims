generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  password        String
  role            Role             @default(EMPLOYEE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  hourLogs        HourLog[]
  jobs            Job[]            @relation("AssignedTo")
  createdJobs     Job[]            @relation("CreatedBy")
  createdProducts Product[]        @relation("ProductCreatedBy")
  progressUpdates ProgressUpdate[]
  jobAssignments  JobAssignment[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
  jobs      Job[]
  portalUsers PortalUser[]
  orders CustomerOrder[]
  quotes Quote[]
  productCatalog CustomerProductCatalog[]
}

model Job {
  id              String           @id @default(cuid())
  title           String
  description     String?
  status          JobStatus        @default(PENDING)
  priority        JobPriority      @default(MEDIUM)
  customerId      String
  createdById     String
  assignedToId    String?
  dueDate         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invoiceId       String?
  assignedTo      User?            @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy       User             @relation("CreatedBy", fields: [createdById], references: [id])
  customer        Customer         @relation(fields: [customerId], references: [id])
  invoice         Invoice?         @relation(fields: [invoiceId], references: [id])
  jobCostings     JobCosting[]
  metrics         JobMetrics?
  jobProducts     JobProduct[]
  progressUpdates ProgressUpdate[]
  jobAssignments  JobAssignment[]
  customerOrder   CustomerOrder?   @relation(fields: [customerOrderId], references: [id])
  customerOrderId String?         @unique
}

model ProgressUpdate {
  id        String   @id @default(cuid())
  content   String
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model JobMetrics {
  id            String   @id @default(cuid())
  jobId         String   @unique
  revenue       Decimal  @default(0) @db.Decimal(10, 2)
  materialCost  Decimal  @default(0) @db.Decimal(10, 2)
  inkCost       Decimal  @default(0) @db.Decimal(10, 2)
  grossProfit   Decimal  @default(0) @db.Decimal(10, 2)
  profitMargin  Decimal  @default(0) @db.Decimal(5, 2)
  totalQuantity Int      @default(0)
  totalTime     Int      @default(0)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  job           Job      @relation(fields: [jobId], references: [id])
}

model Product {
  id               String           @id @default(cuid())
  name             String
  sku              String           @unique
  description      String?
  productClass     ProductClass
  basePrice        Decimal          @db.Decimal(10, 2)
  unit             String
  dimensions       String?
  weight           Float?
  material         String?
  finishOptions    String[]
  minOrderQuantity Int              @default(1)
  leadTime         Int?
  isActive         Boolean          @default(true)
  createdById      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  packagingType    String?
  printResolution  String?
  paperWeight      Int?
  foldType         String?
  bindingType      String?
  costPerSqMeter   Decimal?         @db.Decimal(10, 2)
  defaultLength    Float?
  defaultWidth     Float?
  invoiceItems     InvoiceItem[]
  jobProducts      JobProduct[]
  createdBy        User             @relation("ProductCreatedBy", fields: [createdById], references: [id])
  productVariants  ProductVariant[]
  orderItems       OrderItem[]
  customerCatalogs CustomerProductCatalog[]
}

model ProductVariant {
  id              String   @id @default(cuid())
  productId       String
  name            String
  description     String?
  priceAdjustment Decimal  @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id])
}

model JobProduct {
  id                String   @id @default(cuid())
  jobId             String
  productId         String
  quantity          Int
  unitPrice         Decimal  @db.Decimal(10, 2)
  totalPrice        Decimal  @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  completedQuantity Int      @default(0)
  inkCostPerUnit    Decimal? @db.Decimal(10, 2)
  inkUsageInMl      Float?
  timeTaken         Int?
  job               Job      @relation(fields: [jobId], references: [id])
  product           Product  @relation(fields: [productId], references: [id])
}

model JobCosting {
  id              String   @id @default(cuid())
  jobId           String
  materialCost    Decimal  @db.Decimal(10, 2)
  laborCost       Decimal  @db.Decimal(10, 2)
  overheadCost    Decimal  @db.Decimal(10, 2)
  totalCost       Decimal  @db.Decimal(10, 2)
  profitMargin    Decimal  @db.Decimal(5, 2)
  estimatedProfit Decimal  @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  job             Job      @relation(fields: [jobId], references: [id])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  customerId    String
  issueDate     DateTime
  dueDate       DateTime
  status        InvoiceStatus @default(PENDING)
  subtotal      Decimal       @db.Decimal(10, 2)
  taxRate       Decimal       @db.Decimal(5, 2)
  taxAmount     Decimal       @db.Decimal(10, 2)
  totalAmount   Decimal       @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customer      Customer      @relation(fields: [customerId], references: [id])
  invoiceItems  InvoiceItem[]
  jobs          Job[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String
  description String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  area        Float?
  length      Float?
  width       Float?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model HourLog {
  id          String    @id @default(cuid())
  userId      String
  date        DateTime  @db.Date
  startTime   DateTime
  endTime     DateTime?
  hours       Float?
  isActive    Boolean   @default(true)
  autoStopped Boolean   @default(false)
  isPaid      Boolean   @default(false)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model JobAssignment {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@index([userId])
  @@index([jobId])
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProductClass {
  PACKAGING
  WIDE_FORMAT
  LEAFLETS
  FINISHED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// Portal User model
model PortalUser {
  id          String      @id @default(uuid())
  email       String      @unique
  passwordHash String
  firstName   String?
  lastName    String?
  role        PortalRole  @default(STANDARD)
  status      UserStatus  @default(ACTIVE)
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String
  lastLogin   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      CustomerOrder[]

  @@map("portal_users")
}

enum PortalRole {
  ADMIN
  STANDARD
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// Customer Order model
model CustomerOrder {
  id            String          @id @default(uuid())
  orderNumber   String          @unique
  status        OrderStatus     @default(DRAFT)
  totalAmount   Decimal         @default(0) @db.Decimal(10, 2)
  currency      String          @default("EUR")
  notes         String?
  customer      Customer        @relation(fields: [customerId], references: [id])
  customerId    String
  portalUser    PortalUser      @relation(fields: [portalUserId], references: [id])
  portalUserId  String
  orderItems    OrderItem[]
  orderFiles    OrderFile[]
  quote         Quote?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  job           Job?

  @@map("customer_orders")
}

enum OrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

// Order Item model
model OrderItem {
  id              String        @id @default(uuid())
  quantity        Int
  unitPrice       Decimal       @db.Decimal(10, 2)
  specifications  Json?
  notes           String?
  order           CustomerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  product         Product       @relation(fields: [productId], references: [id])
  productId       String
  files           OrderFile[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("order_items")
}

// Order File model
model OrderFile {
  id           String       @id @default(uuid())
  fileName     String
  fileUrl      String
  fileType     String
  order        CustomerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  orderItem    OrderItem?   @relation(fields: [orderItemId], references: [id])
  orderItemId  String?
  uploadedBy   String
  uploadedAt   DateTime     @default(now())

  @@map("order_files")
}

// Quote model
model Quote {
  id           String        @id @default(uuid())
  quoteNumber  String        @unique
  status       QuoteStatus   @default(PENDING)
  expiresAt    DateTime
  totalAmount  Decimal       @db.Decimal(10, 2)
  items        Json
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  order        CustomerOrder? @relation(fields: [orderId], references: [id])
  orderId      String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("quotes")
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// Customer Product Catalog
model CustomerProductCatalog {
  id                   String   @id @default(uuid())
  customerProductCode  String?
  customerProductName  String?
  customPrice          Decimal? @db.Decimal(10, 2)
  isVisible            Boolean  @default(true)
  customer             Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId           String
  product              Product  @relation(fields: [productId], references: [id])
  productId            String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([customerId, productId])
  @@map("customer_product_catalog")
}
